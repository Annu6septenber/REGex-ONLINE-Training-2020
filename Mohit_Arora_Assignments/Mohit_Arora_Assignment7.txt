Q1. Use time module by which you will be able to send a message at 12:00 am
       - Url of whatsapp in this function using webbrowser 
Ans:	
	import webbrowser as wb
	import time
	import pyautogui as g
	send=False
	print(time.ctime())
	number=int(input("Enter number to send message: "))
	message=input("Enter your message: ")
	YourTime=input("Enter time to send message(hh:mm:ss): ")
	print(time.ctime())
	while(True):    
    		t=time.ctime()
    		str(t)
    		a=t.split(" ")
    		if a[3]== YourTime:
        			send=True
    		if send==True:
        			print("send")
        			send=False
        			time.sleep(1)
        			url='https://wa.me/'+str(number)+'?text='+str(message)
        			print(url)
        			wb.open(url)
        			time.sleep(5)
        			g.moveTo(670,315)
        			g.click()
        			time.sleep(5)
        			g.press('enter')
       			print("Task complete")


Q2. Make a use of time module and for loop and create Loading..... animation.
Ans:	
	import time as t
	import sys
	sys.stdout.write('Loading')
	for i in range(5):
    		sys.stdout.write('.')
    		t.sleep(1)


Q3. Make digital clock and run it for 5 sec
Ans:	
	import time as t
	for i in range(5):
    		a=str(t.ctime())
    		b=a.split(" ")
    		print(b[3])
    		t.sleep(1)

Q4. Adding anythin in tuple eg:(1,2,3,4) -> (1,2,3,4,5)
Ans:	
	old=(1,2,3,4)
	lists=list(old)
	print(type(lists))
	x=input("Enter value: ")
	lists.append(x)
	New=tuple(lists)
	print(New,type(New))

Q5. Difference between Return and Yield ?
Ans:   Return: Returns the value to the caller
	     Return statement runs only one time
	     Code written after return statement wont execute
	     Every function calls run the function from the start.
        
           Yield: Yield returns the value to the caller and preserve the current state
	    Yield statement can run multiple times	
	    Code written after yield statement execute in next function call
	    Yield statement function is executed from the last state from where the function get paused.
	